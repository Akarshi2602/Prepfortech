class Solution:
    def orangesRotting(self, grid: List[List[int]]) -> int:
        row,col=len(grid),len(grid[0])
        rotting={(i,j) for i in range(row) for j in range(col) if grid[i][j]==2}
        fresh={(i,j) for i in range(row) for j in range(col) if grid[i][j]==1}
        time=0
        while fresh:
            if not in rotting: return -1
            rotting ={i+di,j+dj for i,j in rotting for di,dj in[(0,1),(1,0),(0,-1),(-1,0)] if (i+di,j+dj in fresh)}
            fresh-=rotting
            time+=1
        return time
            
                
        class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        int fresh=0;
        int time=-1;
        
    vector<pair<int,int>> dirs={{0,1},{1,0},{0,-1},{-1,0}};
        queue<pair<int,int>> q;
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if (grid[i][j]==1) fresh++;
                else if (grid[i][j]==2) q.push({i,j});
            }
        }
        
        while(!q.empty())
        {
            int sz=q.size();
            for(int i=0;i<sz;i++)
            {
                auto cur=q.front();
                q.pop();
                for(auto dir:dirs)
                {
                    int x=cur.first+dir.first;
                    int y=cur.second+dir.second;
                    if(x>=0 && y>=0 &&x <m&& y<n && grid[x][y]==1)
                    {
                       grid[x][y]=2;
                        q.push({x,y});
                        fresh--;
                    }
                }
            }
            time++;
        }
        return (fresh>0)?-1:((time==-1)?0:time);
    }
};

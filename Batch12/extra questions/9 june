class Solution:
    def fourSum(self, nums: List[int], target: int) -> List[List[int]]:
        nums.sort()
        n=len(nums)
        ans=set()
        for i in range(n):
            for j in range(i+1,n):
                l,r=j+1,n-1
                remain=target-nums[i]-nums[j]
                while l<r:
                    if nums[l]+nums[r]==remain:
                        ans.add((nums[i],nums[j],nums[l],nums[r]))
                        l+=1
                        r-=1
                    elif  nums[l]+nums[r]>remain:
                        r-=1
                    else:
                        l+=1
        return ans   
                        n^3 +nlogn ---n^3
                        
                        
                        
                        
                        class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0,high=nums.size()-1;int mid=0;
        while(mid<=high)
        {
            switch(nums[mid])
            {
                case 0: swap(nums[low++],nums[mid++]); break;
                    
                case 1: mid++; break;
                    
                case 2: swap(nums[mid],nums[high--]); break;
            }
        }
    }
};

class Solution {
public:
    void sortColors(vector<int>& nums) {
        int low=0,high=nums.size()-1;int mid=0;
        while(mid<=high)
        {
            switch(nums[mid])
            {
                case 0: swap(nums[low++],nums[mid++]); break;
                    
                case 1: mid++; break;
                    
                case 2: swap(nums[mid],nums[high--]); break;
            }
        }
    }
};
linear n 

dutch national flag algo

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        s=set()
        def helper(root,k):
            if not root: return False
            if k-root.val in s:
                return True
            s.add(root.val)
            return (helper(root.left,k)  or helper(root.right,k))
        return helper(root,k)
        
        
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    set<int>s;
    bool findTarget(TreeNode* root, int k) {
        if(!root) return false;
        if(s.count(k-root->val)) return true;
        
        s.insert(root->val);
        return findTarget(root->left,k) || findTarget(root->right,k);
        
    }
};


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void  Inordertraversal(TreeNode* root, vector<int> &ans)
    {
        if(!root) return ;
  Inordertraversal(root->left,ans);
        ans.push_back(root->val);
    Inordertraversal(root->right,ans);
        
    }
    bool findTarget(TreeNode* root, int k) {
        vector<int> trav;
        Inordertraversal(root,trav);
        int left=0;
        int right=trav.size()-1;
        while(left<right)
        {
            if(trav[left]+trav[right]==k) return true;
            else if(trav[left]+trav[right]<k) left++;
            else right--;
        }
        return false;
    }
};

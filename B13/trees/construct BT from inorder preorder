# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if inorder:
            ind=inorder.index(preorder.pop(0))
            root=TreeNode(inorder[ind])
            root.left=self.buildTree(preorder,inorder[0:ind])
            root.right=self.buildTree(preorder,inorder[ind+1:])
            return root
        

        /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int preind;
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return create(preorder,inorder,0,inorder.size()-1);
    }
    TreeNode *create(vector<int>& preorder, vector<int>& inorder,int s,int e)
    {
        if(s>e) return NULL:
        TreeNode* root=new TreeNode(preorder[preind++]);
        
        int pos;
        for(int i=s;i<=e;i++)
        {
           if(inorder[i]==node->val)
           {
               pos=i;
               break
           }
            
        }
        node->left=create(preorder,inorder,s,pos-1);
             node->right=create(preorder,inorder,pos+1,e);
        return root;
    }
};

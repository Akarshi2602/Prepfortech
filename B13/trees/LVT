# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        q,res=deque(),[]
        if root:
            q.append(root)
        while len(q):
            level=[]
            for _ in range(len(q)):
                x=q.popleft()
                level.append(x.val)
                if x.left:
                    q.append(x.left)
                if x.right:
                    q.append(x.right)
            res.append(level)
            
        return res
                    
                    
                    /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> res;
        
        if(root == NULL) return res;
        
        queue<TreeNode* > q;
        q.push(root);
        while(!q.empty())
        {
            int size=q.size();vector<int> level;
            while(size--)
            {
                TreeNode * temp=q.front();
                q.pop();
                level.push(temp->val);
                if(temp->left) q.push(temp->left);
                  if(temp->right) q.push(temp->right);
            }
            res.push(level);
        }
    }
};

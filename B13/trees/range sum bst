/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(!root) return 0;
        if (root->val >=low && root->val<=high) return root->val+rangeSumBST(root->left,low,high)+rangeSumBST(root->right,low,high);
        
        return rangeSumBST(root->left,low,high)+rangeSumBST(root->right,low,high);
    }
};

class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        stk,ssum=[root],0
        while stk:
            node=stk.pop()
            if node:
                if node.val>low:
                    stk.append(node.left)
                if node.val<high:
                    stk.append(node.right)
                if low<=node.val<=high:
                    ssum+=node.val
        return ssum  
        

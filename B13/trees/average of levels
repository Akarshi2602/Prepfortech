# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:
        q=deque([root])
        res=[]
        
        while q:
            level=[]
            for i in range(len(q)):
                node=q.popleft()
                level.append(node.val)
                if node.left: 
                    q.append(node.left)
                if node.right: 
                    q.append(node.right)
            res.append(sum(level)/len(level))
        
        return res
                    
        
        /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        queue<TreeNode * >q;
        double temp;
        int size;
        int i;
        vector <double> res;
        TreeNode *curr;
        q.push(root);
        
        while(!q.empty())
        {
            temp=0;
            size=q.size();
            
          for(int i=0;i<size;i++)
            {
                curr=q.front();
                q.pop();
                
                if(curr->left) q.push(curr->left);
                 if(curr->right) q.push(curr->right);
                
                temp+=curr->val;
                
            }
            res.push_back((double) temp/size);
            
        }
        return res;
        
    }
};

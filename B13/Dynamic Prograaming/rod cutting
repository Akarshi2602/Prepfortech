https://practice.geeksforgeeks.org/problems/rod-cutting0840/1

#User function Template for python3

class Solution:
    def cutRod(self, price, n):
        #code here
        dp=[None for i in range (n+1)]
        def help(size):
            if size==0:
                return 0
            if dp[size]:
                return dp[size]
            cut=-math.inf
            
            for i in range(1,size+1):
                cut =max(cut,price[i-1]+rec(size-i))
            dp[size]=cut
            return cut
        
        return help(n)



#{ 
 # Driver Code Starts
#Initial Template for Python 3

def main():

    T = int(input())

    while(T > 0):
        n = int(input())
        a = [int(x) for x in input().strip().split()]
        ob = Solution()
        print(ob.cutRod(a, n))

        T -= 1


if __name__ == "__main__":
    main()
# } Driver Code Ends



// { Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
// User function Template for C++

class Solution{
  public:
  int solve(int price[],int n,int len,vector<int> &dp)
  {
      if(len==0) return 0;
      
      if(dp[len]!=-1) return dp[len];
      
      int res=INT_MIN;
      
      for(int i=1;i<=len;i++)
      {
          int ans=solve(price,n,len-i,dp) +price[i-1];
          res=max(res,ans);
          
      }
      return dp[len]=res;
      
  }
    int cutRod(int price[], int n) {
        //code here
        vector<int> dp(n+1,-1);
        
        return solve(price,n,n,dp);
    }
};

// { Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) 
            cin >> a[i];
            
        Solution ob;

        cout << ob.cutRod(a, n) << endl;
    }
    return 0;
}  // } Driver Code Ends

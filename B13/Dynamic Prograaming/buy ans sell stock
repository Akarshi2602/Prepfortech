class Solution {
public:
    int maxProfit(vector<int>& prices) {
        return help(prices,0,1,1,new HashMap<String,Integer>  memo)
    }
    public int help(int[] prices,int cur,int canbuy,int transc,HashMap<String,Integer>  memo)
    {
        if(curr>=prices.length || transc<=0) return 0;
        
        String curkey= cur+"-"+canbuy+"-"+ transc ;
        
        if(memo.containsKey(curkey)) return memo[curkey];
        
        if(canbuy==1)
        {
            int idle=help(prices,cur+1,canbuy,transc,memo);
            int buy = help(prices,cur+1,0,transc,memo)-prices[cur];
            
            memo.put(curkey.Math.max(idle,buy));
            return memo.get(curkey);
        }
        else{
            int idle=help(prices,cur+1,canbuy,transc,memo);
            int sell = help(prices,cur+1,0,transc-1,memo)-prices[cur];
            
            memo.put(curkey.Math.max(idle,sell));
            return memo.get(curkey);
        }
    }
};


class Solution {
public:
    int maxProfit(vector<int>& prices) {
        return help(prices,0,1,1,new HashMap<String,Integer>  memo)
    }
    public int help(int[] prices,int cur,int canbuy,int transc,HashMap<String,Integer>  memo)
    {
        if(curr>=prices.length || transc<=0) return 0;
        
        String curkey= cur+"-"+canbuy+"-"+ transc ;
        
        if(memo.containsKey(curkey)) return memo[curkey];
        
        if(canbuy==1)
        {
            int idle=help(prices,cur+1,canbuy,transc,memo);
            int buy = help(prices,cur+1,0,transc,memo)-prices[cur];
            
            memo.put(curkey.Math.max(idle,buy));
            return memo.get(curkey);
        }
        else{
            int idle=help(prices,cur+1,canbuy,transc,memo);
            int sell = help(prices,cur+1,0,transc-1,memo)-prices[cur];
            
            memo.put(curkey.Math.max(idle,sell));
            return memo.get(curkey);
        }
    }
};



class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        left=0
        right=1
        max_profit=0
        while right<len(prices):
            currprofit=prices[right]-prices[left]
            if prices[left]<prices[right]:
                max_profit=max(currprofit,max_profit)
            else:
                left=right
            right+=1
        return max_profit 
        
        
        
        
        class Solution {
public:
    int maxProfit(vector<int>& prices) {
        
        int n=prices.size();
        int ans=0;
        for(int i=1;i<n;i++)
            ans+=max(0,prices[i]-prices[i-1]);
        
        return ans;
    }
};




class Solution {
public:
    int maxProfit(vector<int>& prices) {
        if(!prices.size) return 0;
        
        int buy1;
        int profit1;
        int buy2;
        int profit2;
        
        for(int i=0;i<prices.size();i++)
        {
            buy1=min(buy1,prices[i]);
            profit1=max(profit1,prices[i]-buy1);
            buy2=min(buy2,)
            profit2=max(profit2,     )
        }
        return profit2;
    }
};




class MyStack {
public:
    MyStack() {
        
    }
    queue<int> q;
    void push(int x) {
        q.push(x);
        for(int i=1;i<q.size();i++)
        {
            q.push(q.front());
            q.pop();
        }
    }
    
    int pop() {  
        
        q.pop();
        
    }
    
    int top() {
        return q.front();
    }
    
    bool empty() {
        return q.empty();
    }
};

/**
 * Your MyStack object will be instantiated and called as such:
 * MyStack* obj = new MyStack();
 * obj->push(x);
 * int param_2 = obj->pop();
 * int param_3 = obj->top();
 * bool param_4 = obj->empty();
 */
 class MyStack:

    def __init__(self):
        self._queue-=collections.deque()
        

    def push(self, x: int) -> None:
       q.append(x)
        len=len(a)
        while(len>1):
            q.append(q.popleft())
            len--
        
        
    def pop(self) -> int:
        return self._queue.popleft()
        

    def top(self) -> int:
        return self._queue[0]
        

    def empty(self) -> bool:
        return not len(self._queue)


# Your MyStack object will be instantiated and called as such:
# obj = MyStack()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.top()
# param_4 = obj.empty()



class MyQueue:
    

    def __init__(self):
        self.stpush=[]
        self.stpop=[]
        

    def push(self, x: int) -> None:
        self.stpush.append(x)
        
        

    def pop(self) -> int:
        self.peek()
        returrn self.stpop.pop()

    def peek(self) -> int:
        if len(self.stpop()==0):
            while(self.stpush):
                self.stpop.append(self.stpush.pop())
        
        return self.stpop
        
        
        
        

    def empty(self) -> bool:
        return (len(self.stpush) +len(self.stpush)==0)
        
        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()

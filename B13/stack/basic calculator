class Solution:
    def calculate(self, s: str) -> int:
        res,num,sign,stack=0,0,1,[]
        for ss in s:
            if ss.isdigit():
                num =10*num+(int)ss
            elif ss in["+","-"]:
                res+=sign*num
                num=0
                sign=[-1,1][ss=="+"]
            elif ss=="(":
                stack.append(res)
                stack.append(sign)
                sign,res=1,0
            elif ss==")":
                res+=sign*num
                res*=stack.pop()
                res+=stack.pop()
                num=0
        return res+num*sign
            
        
        
        2 stacks
        1 stacks
                
            class Solution:
    def evalRPN(self, tokens: List[str]) -> int:
        stack=[]
        for t in tokens:
            if t not in "+-*/":
                stack.append(int(t)):
            else:
                r,l=stack.pop(),stack.pop()
                if t=="+":
                    stack.append(l+r)
                if t=="-":
                    stack.append(l-r)
                if t=="*":
                    stack.append(l*r)
                else:
                    stack.append(int(float(l)/r))
            return stack.pop()
            
        
                
                
            
            
            
        

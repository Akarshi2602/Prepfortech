/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        unordered_map<ListNode *,int> m;
        
        while(headA!=NULL)
        {
            m[headA]++;
            headA=headA->next;          
        }
        while(headB)
        {
            if(m[headB]>0) return headB;
            
            headB=headB->next;
                
        }
        return NULL;
    }
};


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        set1=set()
        curr=headA
        
        while curr:
            set1.add(curr)
            curr=curr.next
        
        curr=headB
        while curr:
            if curr in set1:
                return curr
            curr=curr.next
            
        return None

//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        int mst=0;
        vector<int> cost(V,INT_MAX);
        cost[0]=0;
        vector<int> vis(V,false);
        priority_queue<pair<int,int> ,vector<<pair<int,int>>,greater<pair<int,int>>>pq;
        pq.push({0,0});
        while(!pq.empty())
        {
            pair<int,int> p=pq.top();
            int curr=p.second;
            int curcost=p.first;
            pq.pop();
            
            IF(vis[curr]) continue;
            
            mst+=currcost;
            vis[curr]=true;
            cost[curr]curcost;
            for(int i=0;i<adj[curr].size();i++)
            {
                int neigh=adj[curr][i][0];
                int neighcost=adj[curr][i][1];
                if(vis[neigh]) continue;
                pq.push({neighcost},neigh});
                
            }
        }
        return mst;
        
    }
};

//{ Driver Code Starts.


int main()
{
    int t;
    cin >> t;
    while (t--) {
        int V, E;
        cin >> V >> E;
        vector<vector<int>> adj[V];
        int i=0;
        while (i++<E) {
            int u, v, w;
            cin >> u >> v >> w;
            vector<int> t1,t2;
            t1.push_back(v);
            t1.push_back(w);
            adj[u].push_back(t1);
            t2.push_back(u);
            t2.push_back(w);
            adj[v].push_back(t2);
        }
        
        Solution obj;
    	cout << obj.spanningTree(V, adj) << "\n";
    }

    return 0;
}


// } Driver Code Ends
